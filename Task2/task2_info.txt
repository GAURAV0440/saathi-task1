
TASK 2 - GenAI Integration using FastAPI

Environment:
- Python Version: 3.10
- Virtual Environment: venv was used

Framework & Libraries Used:
1. FastAPI                -> For creating the API service
2. Uvicorn                -> ASGI server to run FastAPI
3. google-generativeai    -> To interact with Gemini / Generative AI models
4. python-dotenv          -> To load API keys from .env file
5. tenacity               -> For retry logic (if needed)
6. pydantic               -> For request/response validation and data models

How to Run:
1. Create virtual environment:
   python3.10 -m venv venv

2. Activate virtual environment:
   - On Windows: venv\Scripts\activate
   - On macOS/Linux: source venv/bin/activate

3. Install dependencies:
   pip install -r requirements.txt

4. Create `.env` file based on `.env.example` with your Gemini API key.

5. Run the server:
   uvicorn main:app --reload

Routes Implemented:
- POST /generate -> Accepts a prompt and returns GenAI response

Example `.env.example`:

GOOGLE_API_KEY=your_gemini_api_key_here
GEMINI_MODEL=gemini-1.5-flash

requirements.txt:
fastapi
uvicorn
google-generativeai
python-dotenv
tenacity
pydantic
